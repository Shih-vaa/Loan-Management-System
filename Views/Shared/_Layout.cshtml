@inject LoanManagementSystem.Data.ApplicationDbContext _context
@{
    int userId = User.Identity?.IsAuthenticated == true
    ? int.Parse(User.Claims.First(c => c.Type == "UserId").Value)
    : 0;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - LoanManagementSystem</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/homepage.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/LoanManagementSystem.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <style>
        /* Improved fixed layout */
        body {
            padding-top: 56px;
            padding-bottom: 60px;
            min-height: 100vh;
        }

        header {
            position: fixed;
            top: 0;
            width: 100%;
            z-index: 1030;
        }

        footer {
            position: fixed;
            bottom: 0;
            width: 100%;
            z-index: 1030;
        }

        main {
            overflow-y: auto;
            height: calc(100vh - 116px);
            margin-top: 1rem;
        }

        /* Notification specific styles */
        .notification-dropdown {
            width: 350px;
            max-height: 60vh;
            overflow-y: auto;
        }

        .notification-item {
            border-bottom: 1px solid #f0f0f0;
            transition: background-color 0.2s;
        }

        .notification-item:hover {
            background-color: #f8f9fa;
        }

        .notification-item.unread {
            background-color: #f0f7ff;
        }

        .notification-message {
            white-space: normal;
            word-wrap: break-word;
        }

        .notification-time {
            font-size: 0.8rem;
        }

        #notificationBadge {
            font-size: 0.7rem;
            top: 5px;
        }
    </style>
</head>

<body>
    <header class="bg-white shadow-sm">
        <nav class="navbar navbar-expand-sm navbar-light bg-white border-bottom">
            <div class="container-fluid">
                <a class="navbar-brand fw-bold" asp-controller="Home" asp-action="Index">
                    <i class="fas fa-hand-holding-usd me-2"></i>LoanManagementSystem
                </a>
                
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                    aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarCollapse">
                    <ul class="navbar-nav me-auto mb-2 mb-sm-0">
                        @if (User.Identity?.IsAuthenticated ?? false)
                        {
                            <li class="nav-item">
                                <span class="nav-link text-dark">
                                    <i class="fas fa-user me-1"></i> @User.Identity.Name
                                </span>
                            </li>

                            <!-- Role Dashboards -->
                            @if (User.IsInRole("admin"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Admin" asp-action="Dashboard">
                                        <i class="fas fa-tachometer-alt me-1"></i>Admin Dashboard
                                    </a>
                                </li>
                            }
                            @if (User.IsInRole("marketing"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Marketing" asp-action="Dashboard">
                                        <i class="fas fa-bullhorn me-1"></i>Marketing Dashboard
                                    </a>
                                </li>
                            }
                            @if (User.IsInRole("calling"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Calling" asp-action="Dashboard">
                                        <i class="fas fa-phone me-1"></i>Calling Dashboard
                                    </a>
                                </li>
                            }
                            @if (User.IsInRole("office"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Office" asp-action="Dashboard">
                                        <i class="fas fa-building me-1"></i>Office Dashboard
                                    </a>
                                </li>
                            }

                            <!-- Feature Links -->
                            @if (User.IsInRole("admin"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Commission" asp-action="Index">
                                        <i class="fas fa-money-bill-wave me-1"></i>Commissions
                                    </a>
                                </li>
                            }
                            @if (User.IsInRole("admin") || User.IsInRole("office"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Customers" asp-action="Index">
                                        <i class="fas fa-users me-1"></i>Customers
                                    </a>
                                </li>
                            }
                            @if (User.IsInRole("admin"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Team" asp-action="Index">
                                        <i class="fas fa-users-cog me-1"></i>Teams
                                    </a>
                                </li>
                            }
                            @if (User.IsInRole("admin"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Lead" asp-action="DeletedLeads">
                                       <i class="fas fa-trash me-1"></i> Deleted Leads</a>
                                </li>
                            }


                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Lead" asp-action="Index">
                                    <i class="fas fa-tasks me-1"></i>Leads
                                </a>
                            </li>
                        }
                    </ul>

                    <ul class="navbar-nav">
                        @if (User.Identity?.IsAuthenticated ?? false)
                        {
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle position-relative" href="#" id="notificationDropdown"
                                    role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-bell"></i>
                                    <span id="notificationBadge"
                                        class="badge bg-danger position-absolute top-0 start-100 translate-middle rounded-pill @(userId > 0 ? "" : "d-none")">
                                        @(userId > 0 ? _context.Notifications.Count(n => n.UserId == userId && !n.IsRead) : 0)
                                    </span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end notification-dropdown py-0" 
                                    aria-labelledby="notificationDropdown" id="notificationList">
                                    <li class="dropdown-item text-center py-3">
                                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <span class="ms-2">Loading notifications...</span>
                                    </li>
                                </ul>
                            </li>

                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Auth" asp-action="Logout">
                                    <i class="fas fa-sign-out-alt me-1"></i>Logout
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Auth" asp-action="Login">
                                    <i class="fas fa-sign-in-alt me-1"></i>Login
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <main class="container py-3">
        @RenderBody()
    </main>

    <footer class="py-3 bg-light border-top">
        <div class="container text-center text-black">
            &copy; 2025 - LoanManagementSystem - <a asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    
    @* <script>
        // Enhanced Notification System
        document.addEventListener('DOMContentLoaded', function() {
            loadNotifications();
            
            // Refresh notifications every 20 seconds
            setInterval(loadNotifications, 3000);
            
            // Load when dropdown is opened
            document.getElementById('notificationDropdown')?.addEventListener('shown.bs.dropdown', loadNotifications);
        });

        async function loadNotifications() {
    const list = document.getElementById('notificationList');
    const badge = document.getElementById('notificationBadge');
    
    if (!list) return;

    try {
        // Show loading state
        list.innerHTML = `
            <li class="dropdown-item text-center py-3">
                <div class="spinner-border spinner-border-sm text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <span class="ms-2">Loading notifications...</span>
            </li>
        `;
        
        // Modified fetch call with credentials and proper URL
        const response = await fetch('@Url.Action("GetLatest", "Notifications")', {
            credentials: 'include', // Crucial for authenticated requests
            headers: {
                'Accept': 'application/json'
            }
        });
        
        if (!response.ok) {
            // More detailed error handling
            const errorText = await response.text();
            throw new Error(`Server responded with ${response.status}: ${errorText}`);
        }
        
        const data = await response.json();
        
        // Debugging log
        console.log('Received notifications:', data);
        
        // Clear existing notifications
        list.innerHTML = '';
        
        if (data.notifications && data.notifications.length > 0) {
            data.notifications.forEach(note => {
                // Use consistent property naming (adjust based on your actual API response)
                const isRead = note.IsRead || note.isRead || false;
                const link = note.Link || note.link || '#';
                const message = note.Message || note.message || '';
                const createdAt = note.CreatedAt || note.createdAt || '';
                const notificationId = note.NotificationId || note.notificationId || 0;
                
                const item = document.createElement("li");
                item.className = `dropdown-item notification-item py-2 ${isRead ? '' : 'unread'}`;
                item.innerHTML = `
    <a href="${link || '#'}" class="text-decoration-none d-block" data-id="${notificationId || ''}">
        <div class="notification-message fw-semibold">
            ${message || 'New notification'}
        </div>
        <div class="notification-time text-muted">
            <small>${new Date(createdAt).toLocaleString('en-IN', {
                timeZone: 'Asia/Kolkata',
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                hour12: true
            })}</small>
        </div>
    </a>
`;

                
                // Mark as read when clicked if unread
                if (!isRead) {
                    item.querySelector('a').addEventListener('click', async function(e) {
                        if (link && link !== '#') {
                            e.preventDefault();
                            await markNotificationAsRead(notificationId);
                            window.location.href = link;
                        } else {
                            await markNotificationAsRead(notificationId);
                        }
                    });
                }
                
                list.appendChild(item);
            });
            
            // Add "View All" link
            list.innerHTML += `
                <li><hr class="dropdown-divider m-0" /></li>
                <li>
                    <a class="dropdown-item text-center py-2" href="/Notifications">
                        <i class="fas fa-list me-1"></i> View All Notifications
                    </a>
                </li>
            `;
        } else {
            list.innerHTML = `
                <li class="dropdown-item text-center py-3 text-muted">
                    <i class="far fa-bell-slash me-1"></i> No notifications
                </li>
            `;
        }
        
        // Update badge
        if (badge) {
            const unreadCount = data.unreadCount || 0;
            if (unreadCount > 0) {
                badge.textContent = unreadCount;
                badge.classList.remove('d-none');
            } else {
                badge.classList.add('d-none');
            }
        }
    } catch (error) {
        console.error('Notification error:', error);
        list.innerHTML = `
            <li class="dropdown-item text-center py-3 text-danger">
                <i class="fas fa-exclamation-triangle me-1"></i> Error loading notifications
                <small class="d-block mt-1">${error.message}</small>
            </li>
        `;
    }
}

        async function markNotificationAsRead(id) {
    try {
        const response = await fetch(`/Notifications/MarkAsRead?id=${id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) throw new Error("Failed to mark as read");

        // ✅ Update badge count visually
        const item = document.querySelector(`.notification-item a[data-id="${id}"]`)?.closest('.notification-item');
        if (item) {
            item.classList.remove("unread");
        }

        const badge = document.getElementById("notificationBadge");
        if (badge && !badge.classList.contains("d-none")) {
            let count = parseInt(badge.textContent) || 0;
            count = Math.max(0, count - 1);
            if (count > 0) badge.textContent = count;
            else badge.classList.add("d-none");
        }
    } catch (err) {
        console.error("Error marking notification as read:", err);
    }
}

    </script> *@





     <!-- ✅ Add NOTIFICATION SCRIPT here (before RenderSection) -->
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        loadNotifications();
        setInterval(loadNotifications, 5000); // Refresh every 20 sec
        
        // Load when dropdown opens
        document.getElementById('notificationDropdown')?.addEventListener('shown.bs.dropdown', async () => {
    await loadNotifications(); // Refresh first
    await fetch('/Notifications/MarkAllAsRead', {
        method: 'POST',
        headers: { 'X-Requested-With': 'XMLHttpRequest' } // optional
    });
    // 🔁 Reload again to reflect grey style
    setTimeout(loadNotifications, 200); // slight delay to reflect UI
});

    });
 // 🔄 Real-time sync between tabs
    window.addEventListener('storage', (e) => {
        if (e.key === 'refreshNotifications') {
            loadNotifications(); // 🔁 Fetch notifications instantly when triggered from another tab
        }
    });
    async function loadNotifications() {
        const list = document.getElementById('notificationList');
        const badge = document.getElementById('notificationBadge');
        if (!list) return;

        try {
            list.innerHTML = `<li class="dropdown-item text-center py-3"><div class="spinner-border"></div></li>`;
            
            const response = await fetch('@Url.Action("GetLatest", "Notifications")');
            const data = await response.json();
            
            list.innerHTML = '';
            if (data.notifications?.length > 0) {
              data.notifications.forEach(note => {
    const indiaTime = new Date(note.createdAt + 'Z').toLocaleString('en-IN', {
        timeZone: 'Asia/Kolkata',
        year: 'numeric',
        month: 'short',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        hour12: true
    });

    const item = document.createElement("li");
item.className = `notification-item py-2 ${note.isRead ? 'read' : 'unread'}`;


item.setAttribute("style", `
  background-color: ${note.isRead ? "#f1f1f1" : "#ffffff"} !important;
  color: ${note.isRead ? "#6c757d" : "#212529"} !important;
`);


item.innerHTML = `
  <a href="${note.link || '#'}" class="d-block text-decoration-none mark-as-read ${note.isRead ? 'read-link' : 'unread-link'}" data-id="${note.notificationId}">
      <div>${note.message}</div>
      <small>${indiaTime}</small>
  </a>
`;

    list.appendChild(item);
});

                
                // Add click handlers
                document.querySelectorAll('.mark-as-read').forEach(link => {
                    link.addEventListener('click', async (e) => {
                        if (!link.dataset.isread) {
                            e.preventDefault();
                            await markNotificationAsRead(link.dataset.id);
                            window.location.href = link.href;
                        }
                    });
                });
            }
            
            if (badge) {
                badge.textContent = data.unreadCount || '';
                badge.classList.toggle('d-none', !data.unreadCount);
            }
        } catch (error) {
            list.innerHTML = `<li class="dropdown-item text-danger">Error loading</li>`;
        }
    }

    async function markNotificationAsRead(id) {
        await fetch(`/Notifications/MarkAsRead?id=${id}`, { method: 'POST' });
        // Update UI immediately
        document.querySelector(`.mark-as-read[data-id="${id}"]`)?.closest('.notification-item')?.classList.remove('unread');
        const badge = document.getElementById('notificationBadge');
        if (badge) {
            const count = Math.max(0, parseInt(badge.textContent) - 1);
            badge.textContent = count || '';
            badge.classList.toggle('d-none', count === 0);
        }
    }
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>